# -*- coding: utf-8 -*-
"""analyze.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/145UiBtDMWgqrX4j0_7nsvXH1A2rpi6Jp
"""

from transformers import pipeline
import pandas as pd
import os

# Load 3-label sentiment model
classifier = pipeline("sentiment-analysis", model="cardiffnlp/twitter-roberta-base-sentiment")

# Map model output labels to readable form
label_map = {
    "LABEL_0": "NEGATIVE",
    "LABEL_1": "NEUTRAL",
    "LABEL_2": "POSITIVE"
}

def apply_sentiment_logic(result, threshold=0.7):
    """
    Override uncertain predictions with NEUTRAL if:
    - score < threshold
    - or score in middle range and label is POSITIVE
    """
    label_id = result['label']
    score = result['score']
    label = label_map[label_id]

    # Hybrid logic: fallback to NEUTRAL if uncertain POSITIVE
    if score < threshold or (label == "POSITIVE" and 0.6 <= score <= 0.75):
        return "NEUTRAL", round(score, 3)
    else:
        return label, round(score, 3)

def analyze_text(text):
    """
    Analyze a single line of feedback.
    Returns: (sentiment label, confidence score)
    """
    result = classifier(text)[0]
    return apply_sentiment_logic(result)

def analyze_csv(input_csv, output_csv="feedback_with_sentiment.csv"):
    """
    Analyze a CSV with a 'text' column and add sentiment + confidence.
    Saves to output_csv.
    """
    if not os.path.exists(input_csv):
        raise FileNotFoundError(f"❌ File not found: {input_csv}")

    df = pd.read_csv(input_csv)

    if 'text' not in df.columns:
        raise ValueError("❌ Input CSV must contain a 'text' column.")

    print(f"🔍 Processing {len(df)} entries from: {input_csv}")

    sentiments = []
    confidences = []

    for text in df['text']:
        result = classifier(text)[0]
        sentiment, confidence = apply_sentiment_logic(result)
        sentiments.append(sentiment)
        confidences.append(confidence)

    df['sentiment'] = sentiments
    df['confidence'] = confidences

    df.to_csv(output_csv, index=False)
    print(f"✅ Done! Results saved to: {output_csv}")


if __name__ == "__main__":
    print("📌 Sentiment Analyzer with Enhanced NEUTRAL Logic\n")

    # Example 1: Single text analysis
    sample = "The item is fine."
    sentiment, score = analyze_text(sample)
    print("🔎 Single Text:")
    print(f"Text: {sample}")
    print(f"Sentiment: {sentiment} (Confidence: {score})")

    print("\n" + "-" * 50 + "\n")

    # Example 2: CSV analysis
    try:
        analyze_csv("customer_feedback.csv")
    except Exception as e:
        print(f"⚠️ Error during CSV analysis: {e}")