# -*- coding: utf-8 -*-
"""gardioapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ewoyWixx0BGlT61L8RYQ_iLdCTq53s7g
"""

import gradio as gr
from transformers import pipeline

# Load 3-class RoBERTa model for sentiment
classifier = pipeline("sentiment-analysis", model="cardiffnlp/twitter-roberta-base-sentiment")

# Label mapping from model outputs
label_map = {
    "LABEL_0": "NEGATIVE",
    "LABEL_1": "NEUTRAL",
    "LABEL_2": "POSITIVE"
}

def apply_sentiment_logic(result, threshold=0.7):
    """
    Enhanced logic to convert uncertain outputs to NEUTRAL.
    """
    label_id = result['label']
    score = result['score']
    label = label_map[label_id]

    if score < threshold or (label == "POSITIVE" and 0.6 <= score <= 0.75):
        return "ðŸ§  Sentiment: NEUTRAL (Confidence: {:.3f})".format(score)
    else:
        return f"ðŸ§  Sentiment: {label} (Confidence: {round(score, 3)})"

def predict_sentiment(text):
    result = classifier(text)[0]
    return apply_sentiment_logic(result)

# Build Gradio UI
demo = gr.Interface(
    fn=predict_sentiment,
    inputs=gr.Textbox(lines=3, placeholder="Enter customer feedback..."),
    outputs="text",
    title="ðŸ“Š Smart Customer Sentiment Analyzer ",
    description="This app predicts sentiment using a RoBERTa model trained for 3 classes: Positive, Negative, and Neutral. Includes confidence override logic.",
    examples=[
        ["The product is great and easy to use."],
        ["The item is fine."],
        ["The support was slow, but helpful."],
        ["Not worth the money."],
        ["Met expectations. Nothing more, nothing less."]
    ]
)

if __name__ == "__main__":
    demo.launch()